{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","Components/Card/Card.js","utils/api/index.js","Components/Study/StudyCard/StudyCard.js","Components/Study/NotEnoughCards/NotEnoughCards.js","Components/Study/Study.js","Components/Deck/CreateDeck/CreateDeck.js","Components/FormComponent/FormComponent.js","Components/Card/AddCard/AddCard.js","Components/Card/EditCard/EditCard.js","Components/Deck/Deck.js","Components/Decks/Decks.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","Card","front","back","id","cardDelete","url","useRouteMatch","onClick","type","style","float","to","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","StudyCard","useState","setFront","currentCard","setCurrentCard","index","setIndex","history","useHistory","useEffect","content","display","height","length","window","confirm","push","NotEnoughCards","useParams","Study","setDeck","deckContents","getDeck","CreateDeck","decks","setDecks","setParentDeck","edit","description","changeHandler","string","inputName","document","querySelector","value","newDeck","desc","validateInputs","list","alert","trim","dbDeck","newId","Math","floor","random","find","htmlFor","onChange","placeholder","width","goBack","submitHandler","FormComponent","frontChangeHandler","backChangeHandler","required","AddCard","initialCard","setCard","grandParent","newCard","EditCard","dbCard","getCard","Deck","undefined","newCards","filter","purgedDeck","deleteHandler","map","cardDeleteHandler","exact","path","Decks","position","top","right","Layout","dbDecks","getDecks","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d1827f6.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nfunction Card({ front, back, id, cardDelete }) {\n    const { url } = useRouteMatch();\n\n    return (\n        <>\n        <div className=\"card p-3\">\n            <div>\n                <p>{front}</p>\n                <p>{back}</p>\n            </div>\n            <div>\n                <button onClick={cardDelete} type=\"button\" className=\"btn btn-danger\" style={{float: \"right\"}}>Delete</button>\n                <Link to={`${url}/cards/${id}/edit`} type=\"button\" className=\"btn btn-secondary mr-2\" style={{float: \"right\"}}>Edit</Link>      \n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Card;","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, {useEffect, useState} from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nfunction StudyCard({ deck }) {\n\n    const [ front, setFront ] = useState(true);\n    const [ currentCard, setCurrentCard ] = useState(null);\n    const [ index, setIndex ] = useState(0);\n    const history = useHistory();\n\n    useEffect(() => {\n        setCurrentCard(cards[index]);\n    }, [index])\n\n    function nextHandler() {\n        if (index === cards.length - 1) {\n            if (window.confirm(\"Restart cards?\")) {\n                setFront(true);\n                setIndex(0);\n                setCurrentCard(cards[0]);\n            } else {\n                history.push('/');\n            }\n        } else {\n            setIndex(index + 1);\n            setFront(true);\n        }\n    }\n\n    const cards = deck.cards;\n\n    let content;\n    if (currentCard) {\n        front ? content = currentCard.front : content = currentCard.back\n    } else {\n        content = \"\";\n    }\n    \n    \n    let btnStyle;\n    front ? btnStyle = {display: \"none\"} : btnStyle={display: \"inline\"}\n    return (\n        <div className=\"card p-4\" style={{height: \"200px\"}}>\n            <h4>Card {index + 1} of {cards.length}</h4>\n            <div>{content}</div>\n            <div className=\"mt-3\">\n                <button onClick={() => setFront(!front)} type=\"button\" className=\"btn btn-secondary mr-2\">Flip</button>\n                {!front ? <button onClick={() => nextHandler()} type=\"button\" className=\"btn btn-primary\"  >Next</button> : \"\"}\n            </div>\n        </div>\n    )\n}\n\nexport default StudyCard;","import React from 'react';\nimport { Link, useRouteMatch, useParams } from 'react-router-dom';\n\nfunction NotEnoughCards({ deck }) {\n\n    const { url } = useRouteMatch();\n    const { deckId } = useParams();\n\n\n    return (\n        <div>\n            <h3>Not Enough Cards.</h3>\n            <p>You need at least 3 cards to study. There are {deck.cards.length} cards in this deck.</p>\n            <Link to={`/decks/${deckId}/cards/new`} type=\"button\" className=\"btn btn-primary\">+ Add Cards</Link>\n        </div>\n    )\n}\n\nexport default NotEnoughCards;","import React, { useEffect, useState } from 'react';\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\nimport { readDeck } from '../../utils/api';\nimport StudyCard from \"./StudyCard/StudyCard\";\nimport NotEnoughCards from \"./NotEnoughCards/NotEnoughCards\";\n\nfunction Study() {\n\n    const [ deck, setDeck ] = useState(null);\n    const { deckId } = useParams();\n\n\n    useEffect(() => {\n        async function getDeck(id) {\n            const deckContents = await readDeck(id);\n            setDeck(deckContents);\n        }\n        getDeck(deckId);\n    }, [])\n\n    let content;\n    deck ? content = \n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\" >Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`} >{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                </ol>\n            </nav>\n            <h2>Study: {deck.name}</h2>\n            {deck.cards.length > 2 ? <StudyCard deck={deck}/> : <NotEnoughCards deck={deck} />}\n        </div> : content = \"\"\n\n    return (\n        <div>\n            {content}\n        </div>\n    )\n}\n\nexport default Study;","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { createDeck, listDecks, readDeck, updateDeck } from '../../../utils/api/index';\n\nfunction CreateDeck({ decks, setDecks, setParentDeck, edit, id }) {\n\n    const history = useHistory();\n    \n    const initialDeck = {\n        id: 0,\n        name: \"\",\n        description: \"\"\n    }\n    const [ deck, setDeck ] = useState(initialDeck);\n\n    useEffect(() => {\n        if (!edit) {\n            let newId = Math.floor(Math.random() * 100);\n            while (decks.find(deck => deck.id === newId)) {\n                newId = Math.floor(Math.random() * 100);\n            }\n            setDeck({ ...deck, id: newId })\n        } else {\n            async function getDeck(id) {\n                const dbDeck = await readDeck(id);\n                setDeck(dbDeck);\n            }\n            getDeck(id);\n        }\n    },[])\n\n    \n\n    function changeHandler(string) {\n        if (string === \"name\") {\n            const inputName = document.querySelector(\"#name\").value;\n            const newDeck = {\n                ...deck,\n                name: inputName\n            }\n            setDeck(newDeck);\n        } else {\n            const desc = document.querySelector(\"#description\").value;\n            const newDeck = {\n                ...deck,\n                description: desc\n            }\n            setDeck(newDeck);\n        }\n    }\n    async function submitHandler() {\n        if (!edit) {\n            if (validateInputs()) {\n                const results = await createDeck(deck);\n                const list = await listDecks();\n                const newDecks = await setDecks(list);\n                history.push(`/decks/${deck.id}`);\n            } else {\n                window.alert(\"Inputs cannot be empty\");\n            }\n        } else {\n            if (validateInputs()) {\n                const results = await updateDeck(deck);\n                const list = await listDecks();\n                const newDecks = await setDecks(list);\n                const newDeck = await setParentDeck(deck);\n                history.push(`/decks/${deck.id}`);\n            } else {\n                window.alert(\"Inputs cannot be empty\");\n            }\n        }\n        \n    }\n\n    function validateInputs() {\n        return deck.name.trim().length > 0 && deck.description.trim().length > 0;\n    }\n\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\" >Home</Link></li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">{edit ? <p className=\"m-0 p-0\">Edit Deck</p> : <p className=\"m-0 p-0\">Create Deck</p>}</li>\n                </ol>\n            </nav>\n            {edit ? <h1>Edit Deck</h1> : <h1>Create Deck</h1>}\n            <form>\n                <label htmlFor=\"name\">\n                    Name\n                    <br />\n                    <input onChange={() => changeHandler(\"name\")}\n                           type=\"text\" \n                           id=\"name\" \n                           placeholder=\"Deck Name\" \n                           style={{width: \"400px\"}}\n                           value={deck.name}></input>\n                </label>\n                <br />\n                <label htmlFor=\"description\">\n                    Description\n                    <br />\n                    <textarea onChange={() => changeHandler(\"desc\")}\n                              type=\"text\" \n                              id=\"description\" \n                              placeholder=\"Brief Description\" \n                              style={{height: \"100px\", width: \"400px\"}}\n                              value={deck.description}></textarea>\n                </label>\n                <div>\n                    <button onClick={() => history.goBack()} type=\"button\" className=\"btn btn-secondary mr-2\">Cancel</button>\n                    <button onClick={() => submitHandler()} type=\"button\" className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateDeck;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction FormComponent({ card, frontChangeHandler, backChangeHandler, submitHandler }) {\n\n    const history = useHistory();\n\n    return (\n        <div>\n            <form>\n                <label htmlFor=\"front\">\n                    Name\n                    <br />\n                    <textarea onChange={() => frontChangeHandler()}\n                           type=\"text\" \n                           id=\"front\" \n                           placeholder=\"Front side of card\" \n                           style={{width: \"400px\"}}\n                           style={{height: \"100px\", width: \"400px\"}}\n                           value={card.front}\n                           required></textarea>\n                </label>\n                <br />\n                <label htmlFor=\"back\">\n                    Description\n                    <br />\n                    <textarea onChange={() => backChangeHandler()}\n                              type=\"text\" \n                              id=\"back\" \n                              placeholder=\"Back side of card\" \n                              style={{height: \"100px\", width: \"400px\"}}\n                              value={card.back}\n                              required></textarea>\n                </label>\n                <div>\n                    <button onClick={() => history.goBack()} type=\"button\" className=\"btn btn-secondary mr-2\">Done</button>\n                    <button onClick={() => submitHandler()} type=\"button\" className=\"btn btn-primary\">Save</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default FormComponent;","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { createCard, listDecks, readDeck } from \"../../../utils/api\";\nimport FormComponent from \"../../FormComponent/FormComponent\";\n\nfunction AddCard({ deckId, setParentDeck, setDecks }) {\n\n    const initialCard = {\n        id: 0,\n        front: \"\",\n        back: \"\",\n        deckId: deckId\n    }\n\n    const history = useHistory();\n    const [ deck, setDeck ] = useState(null);\n    const [ card, setCard ] = useState(initialCard);\n    useEffect(() => {\n        async function getDeck(id) {\n            const dbDeck = await readDeck(id);\n            setDeck(dbDeck);\n\n            let newId = Math.floor(Math.random() * 1000);\n            while (dbDeck.cards.find(card => card.id === newId)) {\n                newId = Math.floor(Math.random() * 1000);\n            }\n            setCard({ ...card, id: newId })\n\n        }\n        getDeck(deckId);\n\n    }, [])\n\n    function frontChangeHandler() {\n        const inputName = document.querySelector(\"#front\").value;\n        const newCard = {\n            ...card,\n            front: inputName\n        }\n        setCard(newCard);\n    }\n\n    function backChangeHandler() {\n        const desc = document.querySelector(\"#back\").value;\n        const newCard = {\n            ...card,\n            back: desc\n        }\n        setCard(newCard);\n    }\n\n    async function submitHandler() {\n        if (validateInputs()) {\n            const z = await createCard(deckId, card);\n            const newDeck = await readDeck(deckId);\n            const parent = await setParentDeck(newDeck);\n            const grandParent = await listDecks();\n            setDecks(grandParent);\n            setCard(initialCard);\n        } else {\n            window.alert(\"Text boxes cannot be empty\");\n        }\n        \n    }\n\n    function validateInputs() {\n        return card.front.trim().length > 0 && card.back.trim().length > 0;\n    }\n\n    let content = deck ?\n    <div>\n        <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\"><Link to=\"/\" >Home</Link></li>\n                <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`} >{deck.name}</Link></li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">Add Card</li>\n            </ol>\n        </nav>\n        <h2>{deck.name}: Add Card</h2>\n        <FormComponent card={card}\n                       frontChangeHandler={frontChangeHandler}\n                       backChangeHandler={backChangeHandler}\n                       submitHandler={submitHandler} />\n    </div> : \"\"\n    return (\n        <div>\n            {content}\n        </div>\n    )\n}\n\nexport default AddCard;","import React, { useEffect, useState } from 'react';\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readCard, updateCard, readDeck } from '../../../utils/api';\nimport FormComponent  from '../../FormComponent/FormComponent';\n\nfunction EditCard({ deckId, setParentDeck }) {\n\n    const { cardId } = useParams();\n    const history = useHistory();\n    const [ card, setCard ] = useState(null);\n    const [ deck, setDeck ] = useState(null);\n    useEffect(() => {\n        async function getDeck(id) {\n            const dbDeck = await readDeck(id);\n            setDeck(dbDeck);\n        }\n        getDeck(deckId);\n\n        async function getCard(id) {\n            const dbCard = await readCard(id);\n            setCard(dbCard);\n        }\n        getCard(cardId);\n\n    }, [])\n\n    function frontChangeHandler() {\n        const inputName = document.querySelector(\"#front\").value;\n        const newCard = {\n            ...card,\n            front: inputName\n        }\n        setCard(newCard);\n    }\n\n    function backChangeHandler() {\n        const desc = document.querySelector(\"#back\").value;\n        const newCard = {\n            ...card,\n            back: desc\n        }\n        setCard(newCard);\n    }\n\n    async function submitHandler() {\n        if (validateInputs()) {\n            const update = await updateCard(card);\n            const newDeck = await readDeck(deckId);\n            const parent = await setParentDeck(newDeck);\n            history.push(`/decks/${deckId}`);\n        } else {\n            window.alert(\"Texts boxes cannot be empty\");\n        }\n        \n    }\n\n    function validateInputs() {\n        return card.front.trim().length > 0 && card.back.trim().length > 0;\n    }\n\n    let content = deck ?\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\" >Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">Edit Card</li>\n                </ol>\n            </nav>\n            <h2>{deck.name}: Edit Card</h2>\n            {card ? <FormComponent card={card} \n                           frontChangeHandler={frontChangeHandler}\n                           backChangeHandler={backChangeHandler}\n                           submitHandler={submitHandler}/> : \"\"}\n        </div> : \"\"\n\n    return (\n        <div>\n            {content}\n        </div>\n    )\n}\n\nexport default EditCard;","import React, { useEffect, useState } from 'react';\nimport { Switch, Route, Link, useRouteMatch, useParams, useHistory } from 'react-router-dom';\nimport Card from \"../Card/Card\";\nimport Study from \"../Study/Study\";\nimport CreateDeck from \"../Deck/CreateDeck/CreateDeck\";\nimport { deleteCard, deleteDeck, readDeck } from \"../../utils/api/index\";\nimport AddCard from \"../Card/AddCard/AddCard\";\nimport EditCard from \"../Card/EditCard/EditCard\";\n\nfunction Deck({ decks, setDecks }) {\n    \n    const history = useHistory();\n    const { deckId } = useParams();\n    const { url } = useRouteMatch();\n    const [ deck, setDeck ] = useState(undefined);\n\n    useEffect(() => {\n        async function getDeck(id) {\n            const deck = await readDeck(id);\n            setDeck(deck);\n        }\n        getDeck(deckId);\n    }, [])\n\n    function deleteHandler(id) {\n        if (window.confirm(\"Delete this deck?\")) {\n            let purgedDeck = decks.filter(deck => deck.id !== id);\n            setDecks(purgedDeck);\n            deleteDeck(id);\n            history.push('/');\n        }\n    }\n\n    async function cardDeleteHandler(cardId) {\n        if (window.confirm(\"Delete Card?\")) {\n            const newCards = deck.cards.filter(card => card.id !== cardId);\n            const newDeck = {\n                ...deck,\n                cards: newCards\n            }\n            const del = await deleteCard(cardId);\n            setDeck(newDeck);\n        }\n        \n    }\n    \n    let content = deck ?\n    <div>\n        <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\"><Link to=\"/\" >Home</Link></li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">{deck.name}</li>\n            </ol>\n        </nav>\n        <h3>{deck.name}</h3>\n        <p className=\"my-4\">{deck.description}</p>\n        <div className=\"my-4\">\n            <Link to={`${url}/edit`} type=\"button\" className=\"btn btn-secondary mr-2\">Edit</Link>\n            <Link to={`${url}/study`} type=\"button\" className=\"btn btn-primary mr-2\">Study</Link>\n            <Link to={`${url}/cards/new`} type=\"button\" className=\"btn btn-primary\">+ Add Cards</Link>\n            <button onClick={() => deleteHandler(deck.id)} type=\"button\" className=\"btn btn-danger\" style={{float: \"right\"}}>Delete</button>\n        </div>\n        <h2>Cards</h2>\n        {deck.cards.map(card => {\n            return (\n                <Card key={card.id} front={card.front} back={card.back} id={card.id} deckId={card.deckId} cardDelete={() => cardDeleteHandler(card.id)}/>\n            )\n        })}\n    </div> : \"\"\n    \n\n    return (\n        <>\n            <Switch>\n                <Route exact path={`${url}`}>\n                    {content}\n                </Route>\n                <Route path={`/decks/:deckId/study`}>\n                    <Study />\n                </Route>\n                <Route path={`${url}/edit`}>\n                    <CreateDeck id={deck ? deck.id : \"\"} edit={true} setDecks={setDecks} setParentDeck={setDeck}/>\n                </Route>\n                <Route path={`${url}/cards/new`}>\n                    <AddCard deckId={deck ? deck.id : \"\"} edit={false} setParentDeck={setDeck} decks={decks} setDecks={setDecks} />\n                </Route>\n                <Route path={`${url}/cards/:cardId/edit`}>\n                    <EditCard deckId={deck ? deck.id : \"\"} setParentDeck={setDeck}/>\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nexport default Deck;","import React, { useEffect, useState } from 'react';\nimport { Switch, Route, Link, useRouteMatch } from 'react-router-dom';\nimport Deck from \"../Deck/Deck\";\nimport Study from \"../Study/Study\";\nimport { deleteDeck } from \"../../utils/api/index\";\nfunction Decks({ decks, setDecks }) {\n\n    const { url } = useRouteMatch();\n\n    function deleteHandler(id) {\n        if (window.confirm(\"Delete this deck?\")) {\n            let purgedDeck = decks.filter(deck => deck.id !== id);\n            setDecks(purgedDeck);\n            deleteDeck(id);\n        }\n        \n    }\n\n    let content;\n    decks ? content = decks.map(deck => {\n        return (\n            <div className=\"card p-4\" key={deck.id}>\n                <div>\n                    <h4>{deck.name}</h4>\n                    <p style={{position:\"absolute\", top: \"15px\", right: \"20px\"}}>{deck.cards.length} cards</p>\n                </div>\n                <p className=\"my-4\">{deck.description}</p>\n                <div>\n                    <Link to={`decks/${deck.id}`} type=\"button\" className=\"btn btn-secondary mr-1\">View</Link>\n                    <Link to={`decks/${deck.id}/study`} type=\"button\" className=\"btn btn-primary\">Study</Link>\n                    <button onClick={() => deleteHandler(deck.id)} type=\"button\" className=\"btn btn-danger\" style={{float: \"right\"}}>Delete</button>\n                </div>\n            </div>\n        )\n    }) : content = \"\";\n\n    return (\n        <>\n            <Switch>\n                <Route path={`decks/:deckId`}>\n                    <Deck decks={decks} />\n                </Route>\n                <Route path={`decks/:deckId/study`}>\n                    <Study />\n                </Route>\n            </Switch>\n            {content}\n        </>\n        \n    )\n}\n\nexport default Decks;","import React, { useState, useEffect, useRouteMatch } from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Decks from \"../Components/Decks/Decks\";\nimport Deck from \"../Components/Deck/Deck\";\nimport { listDecks } from \"../utils/api/index\";\nimport CreateDeck from \"../Components/Deck/CreateDeck/CreateDeck\";\n\nfunction Layout() {\n\n  const [ decks, setDecks ] = useState([]);\n\n  useEffect(() => {\n        async function getDecks() {\n          const dbDecks = await listDecks();\n          setDecks(dbDecks);\n        }\n        getDecks();\n  }, [])\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Link to=\"/decks/new\" type=\"button\" className=\"btn btn-secondary mb-2\">+ Create Deck</Link>\n            <Decks decks={decks} setDecks={setDecks} />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck decks={decks} setDecks={setDecks} edit={false} id={null} />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <Deck decks={decks} setDecks={setDecks}/>\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n        \n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}